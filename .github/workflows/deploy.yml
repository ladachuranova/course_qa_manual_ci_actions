name: Deploy to PythonAnywhere

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: 'Select branch to deploy'
        required: true
        default: 'main'
        type: string
        options:
          - main
          - develop
          - feature-branch
      host:
        description: 'Select the PythonAnywhere host'
        required: true
        default: 'production'
        type: string
        options:
          - production
          - staging
          - dev

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}  # Используем выбранную ветку

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: python manage.py test

  deploy:
    name: Deploy to PythonAnywhere
    runs-on: ubuntu-latest
    needs: test  # Зависимость от джоба тестирования

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}  # Используем выбранную ветку

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Archive project files
        run: zip -r project_archive.zip . -x ".git/*"

      - name: Upload archive to PythonAnywhere
        env:
          PYTHONANYWHERE_API_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
          PYTHONANYWHERE_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
          HOST: ${{ github.event.inputs.host }}  # Используем выбранный хост
        run: |
          if [ "$HOST" == "production" ]; then
            UPLOAD_URL="https://www.pythonanywhere.com/api/v0/user/$PYTHONANYWHERE_USERNAME/files/path/home/$PYTHONANYWHERE_USERNAME/weather_proj/project_archive.zip"
          elif [ "$HOST" == "staging" ]; then
            UPLOAD_URL="https://www.pythonanywhere.com/api/v0/user/$PYTHONANYWHERE_USERNAME/files/path/home/$PYTHONANYWHERE_USERNAME/staging_proj/project_archive.zip"
          else
            UPLOAD_URL="https://www.pythonanywhere.com/api/v0/user/$PYTHONANYWHERE_USERNAME/files/path/home/$PYTHONANYWHERE_USERNAME/dev_proj/project_archive.zip"
          fi
          echo "Uploading project_archive.zip to $UPLOAD_URL..."
          curl -s -w "\nHTTP_CODE:%{http_code}" \
            -X POST \
            -H "Authorization: Token $PYTHONANYWHERE_API_TOKEN" \
            -F "content=@project_archive.zip" \
            "$UPLOAD_URL"

      - name: Extract archive on PythonAnywhere
        env:
          PYTHONANYWHERE_API_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
          PYTHONANYWHERE_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
          CONSOLE_ID: ${{ secrets.CONSOLE_ID }}
          HOST: ${{ github.event.inputs.host }}  # Используем выбранный хост
        run: |
          if [ "$HOST" == "production" ]; then
            PROJECT_PATH="/home/$PYTHONANYWHERE_USERNAME/weather_proj"
          elif [ "$HOST" == "staging" ]; then
            PROJECT_PATH="/home/$PYTHONANYWHERE_USERNAME/staging_proj"
          else
            PROJECT_PATH="/home/$PYTHONANYWHERE_USERNAME/dev_proj"
          fi
          UNZIP_URL="https://www.pythonanywhere.com/api/v0/user/$PYTHONANYWHERE_USERNAME/consoles/$CONSOLE_ID/send_input/"
          echo "Extracting archive on $PROJECT_PATH..."
          curl -s -w "\nHTTP_CODE:%{http_code}" \
            -X POST \
            -H "Authorization: Token $PYTHONANYWHERE_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"input":"unzip -o $PROJECT_PATH/project_archive.zip -d $PROJECT_PATH/\n"}' \
            "$UNZIP_URL"

      - name: Apply migrations
        env:
          PYTHONANYWHERE_API_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
          PYTHONANYWHERE_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
          CONSOLE_ID: ${{ secrets.CONSOLE_ID }}
          HOST: ${{ github.event.inputs.host }}  # Используем выбранный хост
        run: |
          if [ "$HOST" == "production" ]; then
            PROJECT_PATH="/home/$PYTHONANYWHERE_USERNAME/weather_proj"
          elif [ "$HOST" == "staging" ]; then
            PROJECT_PATH="/home/$PYTHONANYWHERE_USERNAME/staging_proj"
          else
            PROJECT_PATH="/home/$PYTHONANYWHERE_USERNAME/dev_proj"
          fi
          MIGRATE_URL="https://www.pythonanywhere.com/api/v0/user/$PYTHONANYWHERE_USERNAME/consoles/$CONSOLE_ID/send_input/"
          echo "Applying migrations on $PROJECT_PATH..."
          curl -s -w "\nHTTP_CODE:%{http_code}" \
            -X POST \
            -H "Authorization: Token $PYTHONANYWHERE_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"input":"cd $PROJECT_PATH && python manage.py migrate\n"}' \
            "$MIGRATE_URL"

      - name: Reload web application
        env:
          PYTHONANYWHERE_API_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
          PYTHONANYWHERE_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
          HOST: ${{ github.event.inputs.host }}  # Используем выбранный хост
        run: |
          if [ "$HOST" == "production" ]; then
            RELOAD_URL="https://www.pythonanywhere.com/api/v0/user/$PYTHONANYWHERE_USERNAME/webapps/$PYTHONANYWHERE_USERNAME.pythonanywhere.com/reload/"
          elif [ "$HOST" == "staging" ]; then
            RELOAD_URL="https://www.pythonanywhere.com/api/v0/user/$PYTHONANYWHERE_USERNAME/webapps/$PYTHONANYWHERE_USERNAME.staging.pythonanywhere.com/reload/"
          else
            RELOAD_URL="https://www.pythonanywhere.com/api/v0/user/$PYTHONANYWHERE_USERNAME/webapps/$PYTHONANYWHERE_USERNAME.dev.pythonanywhere.com/reload/"
          fi
          echo "Reloading web application on $HOST..."
          curl -s -w "\nHTTP_CODE:%{http_code}" \
            -X POST \
            -H "Authorization: Token $PYTHONANYWHERE_API_TOKEN" \
            "$RELOAD_URL"
